#ifdef GL_ES
precision mediump float;
#endif

uniform vec3 u_eyePosWorld;

varying vec3 v_Normal;
varying vec3 v_Kd;
varying vec4 v_Position;

struct Light {
  vec3 u_LightPos, u_LightAmb, u_LightDiff, u_LightSpec;
  vec3 u_Ke, u_Ka, u_Kd, u_Ks;
  int u_Kshiny;
};

uniform Light light;

void main() {
  vec3 normal = normalize(v_Normal);
  vec3 lightDirection = normalize(light.u_LightPos - v_Position.xyz);
  vec3 eyeDirection = normalize(u_eyePosWorld - v_Position.xyz);
  float nDotL = max(dot(lightDirection, normal), 0.0);
  vec3 H = normalize(lightDirection + eyeDirection);
  float nDotH = max(dot(H, normal), 0.0);
  float e64 = pow(nDotH, float(light.u_Kshiny));

  vec3 emissive = light.u_Ke;
  vec3 ambient = light.u_LightAmb * light.u_Ka;
  vec3 diffuse = light.u_LightDiff * v_Kd * nDotL;
  vec3 speculr = light.u_LightSpec * light.u_Ks * e64;

  gl_FragColor = vec4(emissive + ambient + diffuse + speculr, 1.0);
}
