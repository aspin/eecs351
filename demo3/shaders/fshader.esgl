#ifdef GL_ES
precision mediump float;
#endif

varying vec3 v_Normal;
varying vec4 v_Position;
varying vec4 v_Color;

varying vec3 v_LightPos;
varying vec3 v_LightAmb;
varying vec3 v_LightDiff;
varying vec3 v_LightSpec;
varying vec3 v_Ke;
varying vec3 v_Ka;
varying vec3 v_Kd;
varying vec3 v_Ks;
varying float v_Kshiny;

uniform bool u_worldOn;
uniform bool u_headOn;
uniform bool u_usePhongShading; // or Gouraud
uniform bool u_usePhongLighting;  // or Blinn-Phong

void main() {
  vec3 normal = normalize(v_Normal);
  vec3 lightDirection = normalize(v_LightPos - v_Position.xyz);
  float nDotL = max(dot(lightDirection, normal), 0.0);
  vec3 H = normalize(lightDirection - normalize(v_Position.xyz));
  float nDotH = max(dot(H, normal), 0.0);
  float e64 = pow(nDotH, float(v_Kshiny));

  vec3 emissive = v_Ke;
  vec3 ambient = v_LightAmb * v_Ka;
  vec3 diffuse = v_LightDiff * v_Kd * nDotL;
  vec3 speculr = v_LightSpec * v_Ks * e64;

  vec3 worldLight;
  if (u_worldOn) {
    worldLight = emissive + ambient + diffuse + speculr;
  } else {
    worldLight = vec3(0.0, 0.0, 0.0);
  }

  vec3 headlightDirection = normalize(vec3(-v_Position));
  float headnDotL = max(dot(headlightDirection, normal), 0.0);
  vec3 headH = normalize(headlightDirection - normalize(v_Position.xyz));
  float headnDotH = max(dot(headH, normal), 0.0);

  vec3 headDiffuse = v_LightDiff * v_Kd * headnDotL;
  vec3 headSpecular = v_LightSpec * v_Ks * pow(headnDotH, float(v_Kshiny));

  vec3 headLight;
  if (u_headOn) {
    headLight = (emissive + ambient + headDiffuse + headSpecular);
  } else {
    headLight = vec3(0.0, 0.0, 0.0);
  }

  gl_FragColor = vec4(worldLight + headLight, 1.0);
}
