#ifdef GL_ES
precision mediump float;
#endif

varying vec3 v_Normal;
varying vec3 v_Kd;
varying vec4 v_Position;
varying vec4 v_Color;

struct Light {
  vec3 u_LightPos, u_LightAmb, u_LightDiff, u_LightSpec;
  vec3 u_Ke, u_Ka, u_Kd, u_Ks;
  int u_Kshiny;
};

uniform Light light;

uniform bool u_worldOn;
uniform bool u_headOn;
uniform bool u_usePhongShading; // or Gouraud
uniform bool u_usePhongLighting;  // or Blinn-Phong

void main() {
  vec3 normal = normalize(v_Normal);
  vec3 lightDirection = normalize(light.u_LightPos - v_Position.xyz);
  float nDotL = max(dot(lightDirection, normal), 0.0);

  float e64;
  if (u_usePhongLighting) {
    vec3 R = reflect(-lightDirection, normal);
    float nDotR = max(dot(R,  - normalize(v_Position.xyz)), 0.0);
    e64 = pow(nDotR, float(light.u_Kshiny));
  } else {
    vec3 H = normalize(lightDirection - normalize(v_Position.xyz));
    float nDotH = max(dot(H, normal), 0.0);
    e64 = pow(nDotH, float(light.u_Kshiny));
  }

  vec3 emissive, ambient, diffuse, speculr;
  if (u_usePhongShading) {
    emissive = light.u_Ke;
    ambient = light.u_LightAmb * light.u_Ka;
    diffuse = light.u_LightDiff * light.u_Kd * nDotL;
    speculr = light.u_LightSpec * light.u_Ks * e64;
  } else {
    emissive = vec3(0.0);
    ambient = light.u_LightAmb * v_Color.rgb;
    diffuse = light.u_LightDiff * v_Color.rgb * nDotL;
    speculr = light.u_LightSpec * v_Color.rgb * e64;
  }

  vec3 worldLight;
  if (u_worldOn) {
    worldLight = emissive + ambient + diffuse + speculr;
  } else {
    worldLight = vec3(0.0, 0.0, 0.0);
  }

  vec3 headlightDirection = normalize(vec3(-v_Position));
  float headnDotL = max(dot(headlightDirection, normal), 0.0);
  // vec3 headH = normalize(headlightDirection - normalize(v_Position.xyz));
  // float headnDotH = max(dot(headH, normal), 0.0);

  float he64;
  if (u_usePhongLighting) {
    vec3 R = reflect(-headlightDirection, normal);
    float nDotR = max(dot(R, -normalize(v_Position.xyz)), 0.0);
    he64 = pow(nDotR, float(light.u_Kshiny));
  } else {
    vec3 H = normalize(headlightDirection - normalize(v_Position.xyz));
    float nDotH = max(dot(H, normal), 0.0);
    he64 = pow(nDotH, float(light.u_Kshiny));
  }

  vec3 headDiffuse, headSpecular;
  if (u_usePhongShading) {
    headDiffuse = light.u_LightDiff * light.u_Kd * headnDotL;
    headSpecular = light.u_LightSpec * light.u_Ks * he64;
  } else {
    headDiffuse = light.u_LightDiff * v_Color.rgb * headnDotL;
    headSpecular = light.u_LightSpec * v_Color.rgb * he64;
  }

  vec3 headLight;
  if (u_headOn) {
    headLight = (emissive + ambient + headDiffuse + headSpecular);
  } else {
    headLight = vec3(0.0, 0.0, 0.0);
  }

  gl_FragColor = vec4(worldLight + headLight, 1.0);
}
