uniform mat4 u_MvpMatrix;
uniform mat4 u_NormalMatrix;
uniform mat4 u_ModelMatrix;
uniform vec3 u_Kd;

struct Light {
  vec3 u_LightPos, u_LightAmb, u_LightDiff, u_LightSpec;
  vec3 u_Ke, u_Ka, u_Kd, u_Ks;
  float u_Kshiny;
};

uniform Light light;

attribute vec4 a_Position;
attribute vec4 a_Normal;
attribute vec4 a_Color;

varying vec4 v_Position;
varying vec3 v_Normal;
varying vec4 v_Color;

varying vec3 v_LightPos;
varying vec3 v_LightAmb;
varying vec3 v_LightDiff;
varying vec3 v_LightSpec;
varying vec3 v_Ke;
varying vec3 v_Ka;
varying vec3 v_Kd;
varying vec3 v_Ks;
varying float v_Kshiny;

void main() {
  gl_Position = u_MvpMatrix * a_Position;
  v_Normal = normalize(vec3(u_NormalMatrix * a_Normal));
  v_Position = u_ModelMatrix * a_Position;
  v_Color = a_Color;

  v_LightPos = light.u_LightPos;
  v_LightAmb = light.u_LightAmb;
  v_LightDiff = light.u_LightDiff;
  v_LightSpec = light.u_LightSpec;
  v_Ke = light.u_Ke;
  v_Ka = light.u_Ka;
  v_Kd = light.u_Kd;
  v_Ks = light.u_Ks;
  v_Kshiny = light.u_Kshiny;
}
